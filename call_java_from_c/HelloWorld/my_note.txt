gcc hello_world.c -o hello_world 
/usr/local/java/jdk1.8.0_171 can be replaced with your own path of $JAVA_PATH
-L /usr/local/java/jdk1.8.0_171/jre/lib/amd64/server -ljvm 
-I /usr/local/java/jdk1.8.0_171/include/ 
-I /usr/local/java/jdk1.8.0_171/include/linux/

Also, if confronted with error while loading shared libraries: libjvm.so: cannot open shared object file: No such file or directory, you should edit the ld.so.conf file.
By using sudo find / -name libjvm.so
it should exist in $JAVA_HOME/jre/lib/amd64/server/libjvm.so
then append a new line to /etc/ld.so.conf
$JAVA_HOME/jre/lib/amd64/server
Run sudo /sbin/ldconfig

To dump the signature/descriptor of each java method
Use javap -s -p *.class

A JNI environment pointer (JNIEnv*) is passed as an argument for each native function mapped to a Java method, allowing for interaction with the JNI environment within the native method. This JNI interface pointer can be stored, but remains valid only in the current thread. Other threads must first call AttachCurrentThread() to attach themselves to the VM and obtain a JNI interface pointer. Once attached, a native thread works like a regular Java thread running within a native method. The native thread remains attached to the VM until it calls DetachCurrentThread() to detach itself.
