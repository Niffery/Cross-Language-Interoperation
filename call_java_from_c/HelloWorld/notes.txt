gcc -l links with a library file
gcc -L looks in directory for library files
gcc -I adds include directory of header files

what libraries should gcc specify when compiling
for -I 	JAVA_HOME/include
	
for -L 	JAVA_HOME/jre/lib/jli
	JAVA_HOME/jre/lib/server //this directory should be included always

for -l	jli
	jvm //this directory should be included always

maybe jli is not needed.
	

	
this is how we could compile through
gcc -I $JAVA_HOME/include -I $JAVA_HOME/include/linux
/ -L $JAVA_HOME/jre/lib/server  hello.c -o hello

/***************************************************************
****************************************************************/

Creating a JVM from a C Program

First, here's the completed C program for reference. Our program dispenses with niceties like error checking that you, of course, would like to do in your real programs:

#include &lt;stdio.h>
#include &lt;jni.h>

JNIEnv* create_vm() {
	JavaVM* jvm;
	JNIEnv* env;
	JavaVMInitArgs args;
	JavaVMOption options[1];
	
	/* There is a new JNI_VERSION_1_4, but it doesn't add anything for the purposes of our example. */
	args.version = JNI_VERSION_1_2;
	args.nOptions = 1;
	options[0].optionString = "-Djava.class.path=c:\\projects\\local\\inonit\\classes";
	args.options = options;
	args.ignoreUnrecognized = JNI_FALSE;

	JNI_CreateJavaVM(&jvm, (void **)&env, &args);
	return env;
}

void invoke_class(JNIEnv* env) {
	jclass helloWorldClass;
	jmethodID mainMethod;
	jobjectArray applicationArgs;
	jstring applicationArg0;

	helloWorldClass = (*env)->FindClass(env, "example/jni/InvocationHelloWorld");

	mainMethod = (*env)->GetStaticMethodID(env, helloWorldClass, "main", "([Ljava/lang/String;)V");

	applicationArgs = (*env)->NewObjectArray(env, 1, (*env)->FindClass(env, "java/lang/String"), NULL);
	applicationArg0 = (*env)->NewStringUTF(env, "From-C-program");
	(*env)->SetObjectArrayElement(env, applicationArgs, 0, applicationArg0);

	(*env)->CallStaticVoidMethod(env, helloWorldClass, mainMethod, applicationArgs);
}


int main(int argc, char **argv) {
	JNIEnv* env = create_vm();
	invoke_class( env );
}

In this section, we're going to look at the create_vm() function. This function creates the JVM and returns a JNI interface pointer.

The function's main task is to invoke the JNI_CreateJavaVM() function. That function's signature is the following:

jint JNI_CreateJavaVM(JavaVM **p_vm, JNIEnv **p_env, void *vm_args);

The first argument is a pointer to a JavaVM pointer. The JavaVM structure can be used to attach and detach native threads to/from the virtual machine, and (sort of) to destroy the VM (destroying a VM is not supported as of JDK 1.4. The DestroyJavaVM call simply waits until all user threads besides the current thread die, and then returns an error code). Our program (somewhat unrealistically) discards the JavaVM pointer when create_vm() returns; one would normally want to provide access to it so that the attach/detach/destroy functionality was available to the C program.

The second argument is a pointer to a JNIEnv pointer. A JNIEnv structure is the main workhorse for JNI programming. It roughly corresponds to a particular Java thread. The JNIEnv returned from JNI_CreateJavaVM(), thus, represents the VM's main thread. We return it from create_vm() because our C program will need it in order to actually launch our Java program.

The third argument is a pointer to an arbitrary pointer, and consists of the VM arguments. In JDK 1.1, there was a structure (JDK1_1InitArgs) which contained VM initialization arguments (including stack size, heap size, etc.). In JDK 1.2, the (inflexible) JDK1_1InitArgs structure is replaced by a structure which consists of (essentially) an array of strings, containing the arguments to pass to the VM. It is this form we use in our program. Here are the definitions:

typedef struct JavaVMInitArgs {
	jint version; 
	//	must be JNI_VERSION_1_2 or JNI_VERSION_1_4 or JVM will 
	//	interpret pointer as a JDK1_1InitArgs

	jint nOptions; // number of options
	JavaVMOption *options; // see definition of JavaVMOption below

	jboolean ignoreUnrecognized; 
	//	if JNI_TRUE, ignore options VM does not understand; 
	//	otherwise return JNI_ERR if there are any unrecognized options
} JavaVMInitArgs;

typedef struct JavaVMOption {
	char *optionString; // a string containing the argument

	void *extraInfo; 
	//	not important except for esoteric options
	//	(e.g., providing alternative exit() hook)

} JavaVMOption;

We create a JavaVMInitArgs which declares a version of JNI_VERSION_1_2. There are some new enhancements to JNI in Java 1.4, allowing things like access to the native byte buffers used by the java.nio package and the ability to attach native threads to the JVM as Java daemon threads. Since neither of these are useful to us, we'll leave this value as-is.

Please also refer to this link:
https://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/invocation.html 
http://enos.itcollege.ee/~jpoial/oop/lugemist/JDCBook/JDCBook/jniexamp.html






About the Example
You can call code written in any programming language from a program written in the Java language by declaring a native Java method, loading the library that contains the native code, and then calling the native method. The ReadFile source code below does exactly this.
However, successfully running the program requires a few additional steps beyond compiling the Java language source file. After you compile, but before you run the example, you have to generate a header file. The native code implements the function defintions contained in the generated header file and implements the business logic as well. The following sections walk through all the steps.


import java.util.*;



class ReadFile {

//Native method declaration

  native byte[] loadFile(String name);

//Load the library

  static {

    System.loadLibrary("nativelib");

  }



  public static void main(String args[]) {

    byte buf[];

//Create class instance

    ReadFile mappedFile=new ReadFile();

//Call native method to load ReadFile.java

    buf=mappedFile.loadFile("ReadFile.java");

//Print contents of ReadFile.java

    for(int i=0;i<buf.length;i++) {

      System.out.print((char)buf[i]);

    }

  }

}

Native Method Declaration
The native declaration provides the bridge to run the native function in the Java1 virtual machine. In this example, the loadFile function maps onto a C function called Java_ReadFile_loadFile. The function implementation accepts a String that represents a file name and returns the contents of that file in the byte array.

  native byte[] loadFile(String name);

Load the Library
The library containing the native code implementation is loaded by a call to System.loadLibrary(). Placing this call in a static initializer ensures this library is only loaded once per class. The library can be loaded outside of the static block if your application requires it. You might need to configure your environment so the loadLibrary method can find your native code library.

  static {

    System.loadLibrary("nativelib");

  }

Compile the Program
To compile the program, just run the javac compiler command as you normally would:

  javac ReadFile.java

Next, you need to generate a header file with the native method declaration and implement the native method to call the C functions for loading and reading a file.
Generate the Header File
To generate a a header file, run the javah command on the ReadFile class. In this example, the generated header file is named ReadFile.h. It provides a method signature that you have to use when you implement the loadfile native function.

  javah -jni ReadFile

Method Signature
The ReadFile.h header file defines the interface to map the Java language method to the native C function. It uses a method signature to map the arguments and return value of the Java language mappedfile.loadFile method to the loadFile native method in the nativelib library. Here is the loadFile native method mapping (method signature):

  /*

   * Class:     ReadFile

   * Method:    loadFile

   * Signature: (Ljava/lang/String;)[B

   */

  JNIEXPORT jbyteArray JNICALL Java_ReadFile_loadFile

    (JNIEnv *, jobject, jstring);

The method signature parameters function as follows:
JNIEnv *: A pointer to the JNI environment. This pointer is a handle to the current thread in the Java virtual machine, and contains mapping and other hosuekeeping information.
jobject: A reference to the method that called this native code. If the calling method is static, this parameter would be type jclass instead of jobject.
jstring: The parameter supplied to the native method. In this example, it is the name of the file to be read.
Implement the Native Method
In this native C source file, the loadFile definition is a copy and paste of the C declaration contained in ReadFile.h. The definition is followed by the native method implementation. JNI provides a mapping for both C and C++ by default.



JNIEXPORT jbyteArray JNICALL Java_ReadFile_loadFile

  (JNIEnv * env, jobject jobj, jstring name) {

    caddr_t m;

    jbyteArray jb;

    jboolean iscopy;

    struct stat finfo;

    const char *mfile = (*env)->GetStringUTFChars(

                env, name, &iscopy);

    int fd = open(mfile, O_RDONLY);



    if (fd == -1) {

      printf("Could not open %s\n", mfile);

    }

    lstat(mfile, &finfo);

    m = mmap((caddr_t) 0, finfo.st_size,

                PROT_READ, MAP_PRIVATE, fd, 0);

    if (m == (caddr_t)-1) {

      printf("Could not mmap %s\n", mfile);

      return(0);

    }

    jb=(*env)->NewByteArray(env, finfo.st_size);

    (*env)->SetByteArrayRegion(env, jb, 0, 

	finfo.st_size, (jbyte *)m);

    close(fd);

    (*env)->ReleaseStringUTFChars(env, name, mfile);

    return (jb);

}

You can approach calling an existing C function instead of implementing one, in one of two ways:

Map the name generated by JNI to the existing C function name. The Language Issues section shows how to map between Xbase database functions and Java language code
Use the shared stubs code available from the JNI page on the java.sun.com web site.
Compile the Dynamic or Shared Object Library
The library needs to be compiled as a dynamic or shared object library so it can be loaded at runtime. Static or archive libraries are compiled into an executable and cannot be loaded at runtime. The shared object or dynamic library for the loadFile example is compiled as follows:

Gnu C/Linux:



gcc  -o libnativelib.so -shared -Wl,-soname,libnative.so  

  -I/export/home/jdk1.2/

include -I/export/home/jdk1.2/include/linux nativelib.c  

  -static -lc



Gnu C++/Linux with Xbase



g++ -o libdbmaplib.so -shared -Wl,-soname,libdbmap.so  

  -I/export/home/jdk1.2/include 

  -I/export/home/jdk1.2/include/linux 

  dbmaplib.cc -static -lc -lxbase


Win32/WinNT/Win2000



cl -Ic:/jdk1.2/include 

  -Ic:/jdk1.2/include/win32 

  -LD nativelib.c -Felibnative.dll

Run the Example
To run the example, the Java virtual machine needs to be able to find the native library. To do this, set the library path to the current directory as follows:

Unix or Linux:

  LD_LIBRARY_PATH=`pwd`

  export LD_LIBRARY_PATH





Windows NT/2000/95:

  set PATH=%path%;.

With the library path properly specified for your platform, invoke the program as you normally would with the interpreter command:

  java ReadFile
